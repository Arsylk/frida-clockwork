import { getHookUnique, Addons } from '@clockwork/hooks';
import { findClass, getClass } from '@clockwork/common';

const className = 'com.google.in.MemoryTrustManager';
const dexBytes = [
    0x64, 0x65, 0x78, 0x0a, 0x30, 0x33, 0x35, 0x00, 0x8e, 0xa2, 0x73, 0xf2, 0xa6, 0xf0, 0x99, 0x67, 0xc8, 0x58, 0x11, 0x3f, 0x19, 0xa2,
    0x78, 0xbd, 0xec, 0x97, 0xf9, 0x80, 0x32, 0x64, 0x19, 0xc5, 0xbc, 0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x40, 0x01,
    0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00,
    0xef, 0x01, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x6c, 0x02,
    0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xd4, 0x02, 0x00, 0x00,
    0xda, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00,
    0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x60, 0x01, 0x00, 0x00, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x02, 0x00, 0x00, 0x01, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x10, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x01,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x03, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x00, 0x01, 0x4c, 0x00, 0x22, 0x4c, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x2f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x61,
    0x6e, 0x61, 0x67, 0x65, 0x72, 0x3b, 0x00, 0x1a, 0x4c, 0x64, 0x61, 0x6c, 0x76, 0x69, 0x6b, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x3b, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61,
    0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
    0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x00, 0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
    0x74, 0x79, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63,
    0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x00, 0x20, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x78, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x73,
    0x6c, 0x2f, 0x58, 0x35, 0x30, 0x39, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3b, 0x00, 0x17, 0x4d,
    0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6a, 0x61, 0x76, 0x61,
    0x00, 0x01, 0x56, 0x00, 0x03, 0x56, 0x4c, 0x4c, 0x00, 0x25, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72,
    0x69, 0x74, 0x79, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x3b, 0x00, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
    0x64, 0x00, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x00,
    0x12, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x00, 0x04, 0x74,
    0x68, 0x69, 0x73, 0x00, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x03, 0x00, 0x07, 0x0e, 0x00, 0x02, 0x01, 0x01, 0x10, 0x1c, 0x01,
    0x18, 0x04, 0x00, 0x00, 0x01, 0x03, 0x00, 0x81, 0x80, 0x04, 0xc8, 0x02, 0x01, 0x81, 0x02, 0x00, 0x01, 0x81, 0x02, 0x00, 0x01, 0x81,
    0x02, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x03, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x01,
    0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x06, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x60, 0x01, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x11, 0x00,
    0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0xe6, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xee, 0x02, 0x00, 0x00, 0x00, 0x10,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00,
];

function useTrustManager(loader?: Java.Wrapper): Java.Wrapper | null {
    loader ??= Java.classFactory.loader ?? undefined;
    if (!loader) {
        throw Error('ClassLoader not found !');
    }

    const InMemoryDexClassLoader = findClass('dalvik.system.InMemoryDexClassLoader', loader);
    const ByteBuffer = findClass('java.nio.ByteBuffer', loader);
    if (!InMemoryDexClassLoader || !ByteBuffer) {
        throw Error(`InMemoryDexClassLoader: ${InMemoryDexClassLoader}, ByteBuffer: ${ByteBuffer}`);
    }

    const inMemory = InMemoryDexClassLoader.$new(ByteBuffer.wrap(Java.array('B', dexBytes)), loader);

    return getClass(className, inMemory);
}

function injectSsl() {
    const uniqHook = getHookUnique();
    const mTrustManagers: Java.Wrapper[] = [];
    uniqHook('javax.net.ssl.SSLContext', 'init', {
        replace(method, ...args) {
            if (mTrustManagers.length === 0) {
                const mgr = useTrustManager()?.$new();
                if (mgr) mTrustManagers.push(mgr);
            }
            if (mTrustManagers.length > 0) {
                args[1] = mTrustManagers;
            }
            return method.call(this, ...args);
        },
    });
    uniqHook('okhttp3.CertificatePinner', 'check', {
        replace: Addons.always(true),
    });
    uniqHook('com.android.org.conscrypt.TrustManagerImpl', 'verifyChain', {
        replace: (_, ...params) => params[0],
    });
    uniqHook('com.datatheorem.android.trustkit.pinning.OkHostnameVerifier', 'verify', {
        replace: Addons.always(true),
    });
    uniqHook('appcelerator.https.PinningTrustManager', 'checkServerTrusted', {
        replace: Addons.always(null),
    });
}

export { useTrustManager, injectSsl };
