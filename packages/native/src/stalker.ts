import { Color, logger } from '@clockwork/logging';
import { Inject } from './inject.js';
import { addressOf } from './utils.js';
import { tryNull } from '@clockwork/common';
import { ProcMaps } from '@clockwork/cmodules';
const { red, green, redBright, magentaBright: pink, gray, dim, black, blue } = Color.use();

let atomics = 0;
function stalk(threadId: number, base: NativePointer) {
    const func_addr: { [key: string]: string } = {};

    const stack: { [key: string]: NativePointer } = {};
    const getInstCallTarget = (ctx: Arm64CpuContext, inst: Arm64Instruction) => {
        if (inst.groups.includes('call')) {
            //@ts-ignore
            const addr = inst.mnemonic === 'bl' ? ptr(inst.operands[0].value) : ctx.x8;
            const key = `${addr.sub(base)}`;
            if (key in rfuncs) {
                stack[`${inst.address}`] = addr;
                return { name: rfuncs[key], addr: addr };
            }
            return { addr: addr };
        }
        return {};
    };

    for (const lib of [
        'libc.so',
        'libart.so',
        'libartbase.so',
        'libnetd_client.so',
        'libdl.so',
        'libc++.so',
        'liblog.so',
        'boot.oat',
        'boot-framework.oat',
        'libandroidfw.so',
        'libselinux.so',
        'libopenjdkjvm.so',
        'libbase.so',
        'libandroid_runtime.so',
        'libcurl.so',
    ]) {
        const mod = Process.findModuleByName(lib);
        if (mod) Stalker.exclude(mod);
    }

    let last: string | null = null;
    Stalker.follow(threadId, {
        events: {
            call: true,
            ret: false,
            exec: false,
            block: false,
            compile: false,
        },
        onReceive: (events: ArrayBuffer) => {},
        transform: (iterator: StalkerArm64Iterator) => {
            let instruction = iterator.next() as Arm64Instruction;
            do {
                if (ProcMaps.inRange(instruction.address)) {
                    //@ts-ignore
                    iterator.putCallout((ctx: Arm64CpuContext) => {
                        const inst = Instruction.parse(ctx.pc) as Arm64Instruction;
                        if (!inst.groups.includes('call')) {
                            // logger.info(
                            //     { tag: inst.address.sub(base).add(0x100000).toString(16) },
                            //     `${inst}`,
                            // );
                            return;
                        }

                        // call, branch, jump, etc.
                        const { name, addr } = getInstCallTarget(ctx, inst);
                        if (name /*|| inst.groups.includes('call')*/) {
                            const prefix = `[${pink(++atomics)}]`;
                            const debug = DebugSymbol.fromAddress(addr ?? NULL);
                            const sx0 = tryNull(() => ctx.x0.readCString()) ?? ctx.x0;
                            const sx1 = tryNull(() => ctx.x1.readCString()) ?? ctx.x1;
                            if (last !== (name ?? debug?.name))
                                logger.info(
                                    { tag: 'call' },
                                    `${prefix} ${inst} ${blue(`${name ?? debug?.name ?? '?'}`)} { x0: ${sx0}, x1: ${sx1} } ${addressOf(inst.address)}`,
                                );
                            last = name ?? debug?.name ?? null;
                        }
                        // ret
                        if (inst.groups.includes('return')) {
                            const prevAddr = ctx.lr;
                            const prevInst = Instruction.parse(prevAddr.sub(0x4));
                            const key = `${prevInst.address}`;
                            const value = stack[key];

                            if (value) {
                                delete stack[`${prevInst.address}`];
                                const prevName = rfuncs[`${value.sub(base)}`];
                                const prefix = `[${pink(atomics--)}]`;
                                const retVal = ctx.x0;
                                logger.info(
                                    { tag: '#ret' },
                                    `${prefix} ${inst} ${prevAddr} ${prevName} ${retVal}`,
                                );
                            } else {
                                const retVal = ctx.x0;
                                logger.info({ tag: '#ret' }, `${inst} ${prevAddr} ${retVal}`);
                            }
                        }
                    });
                }
                iterator.keep();
            } while ((instruction = iterator.next() as Arm64Instruction) !== null);
        },

        onCallSummary: (summary) => {},
    });
}

const rfuncs = {
    '0x10030': 'FUN_00110030',
    '0x1007c': 'FUN_0011007c',
    '0x1053c': 'FUN_0011053c',
    '0x10848': 'FUN_00110848',
    '0x1093c': 'FUN_0011093c',
    '0x10aa0': 'FUN_00110aa0',
    '0x10d64': 'FUN_00110d64',
    '0x11030': 'FUN_00111030',
    '0x11590': 'FUN_00111590',
    '0x11688': 'FUN_00111688',
    '0x116d4': 'FUN_001116d4',
    '0x119b4': 'FUN_001119b4',
    '0x11bcc': 'FUN_00111bcc',
    '0x11d4c': 'FUN_00111d4c',
    '0x11d98': 'FUN_00111d98',
    '0x11f3c': 'FUN_00111f3c',
    '0x120e4': 'FUN_001120e4',
    '0x12130': 'FUN_00112130',
    '0x122cc': 'FUN_001122cc',
    '0x123b8': 'FUN_001123b8',
    '0x123f8': 'FUN_001123f8',
    '0x12428': 'FUN_00112428',
    '0x12468': 'FUN_00112468',
    '0x124a0': 'FUN_001124a0',
    '0x12610': 'FUN_00112610',
    '0x1265c': 'FUN_0011265c',
    '0x126a8': 'FUN_001126a8',
    '0x1270c': 'FUN_0011270c',
    '0x1276c': 'FUN_0011276c',
    '0x1295c': 'FUN_0011295c',
    '0x12a28': 'FUN_00112a28',
    '0x12a88': 'operator.delete',
    '0x12a8c': 'FUN_00112a8c',
    '0x12aa0': 'FUN_00112aa0',
    '0x12b00': 'FUN_00112b00',
    '0x12b0c': 'FUN_00112b0c',
    '0x12b30': 'operator.delete',
    '0x12b34': 'FUN_00112b34',
    '0x12b48': 'FUN_00112b48',
    '0x12b94': 'FUN_00112b94',
    '0x12d8c': 'FUN_00112d8c',
    '0x1300c': 'FUN_0011300c',
    '0x13124': 'FUN_00113124',
    '0x13164': 'FUN_00113164',
    '0x131a4': 'FUN_001131a4',
    '0x133c8': 'FUN_001133c8',
    '0x13430': 'FUN_00113430',
    '0x134c4': 'FUN_001134c4',
    '0x13710': 'FUN_00113710',
    '0x138dc': 'FUN_001138dc',
    '0x14138': 'FUN_00114138',
    '0x14818': 'FUN_00114818',
    '0x14a2c': 'FUN_00114a2c',
    '0x14b6c': 'FUN_00114b6c',
    '0x14cac': 'FUN_00114cac',
    '0x14dec': 'FUN_00114dec',
    '0x14f2c': 'FUN_00114f2c',
    '0x1506c': 'FUN_0011506c',
    '0x151c0': 'FUN_001151c0',
    '0x1555c': 'FUN_0011555c',
    '0x1569c': 'FUN_0011569c',
    '0x15838': 'FUN_00115838',
    '0x15a34': 'FUN_00115a34',
    '0x15c40': 'FUN_00115c40',
    '0x15f5c': 'FUN_00115f5c',
    '0x160c4': 'FUN_001160c4',
    '0x16290': 'FUN_00116290',
    '0x16484': 'FUN_00116484',
    '0x16558': 'FUN_00116558',
    '0x16670': 'FUN_00116670',
    '0x166ec': 'FUN_001166ec',
    '0x166f4': 'FUN_001166f4',
    '0x1671c': 'FUN_0011671c',
    '0x16730': 'FUN_00116730',
    '0x16760': 'FUN_00116760',
    '0x167d4': 'FUN_001167d4',
    '0x16858': 'FUN_00116858',
    '0x168a8': 'FUN_001168a8',
    '0x16900': 'FUN_00116900',
    '0x16904': 'FUN_00116904',
    '0x16908': 'FUN_00116908',
    '0x16a08': 'FUN_00116a08',
    '0x16a1c': 'FUN_00116a1c',
    '0x16a24': 'FUN_00116a24',
    '0x16a2c': 'FUN_00116a2c',
    '0x16af4': 'FUN_00116af4',
    '0x16b44': 'FUN_00116b44',
    '0x16b84': 'FUN_00116b84',
    '0x16bf4': 'FUN_00116bf4',
    '0x16cbc': 'FUN_00116cbc',
    '0x16ef0': 'FUN_00116ef0',
    '0x16f04': 'FUN_00116f04',
    '0x16f38': 'FUN_00116f38',
    '0x16f44': 'FUN_00116f44',
    '0x16f50': 'FUN_00116f50',
    '0x16f58': 'FUN_00116f58',
    '0x16f60': 'FUN_00116f60',
    '0x16f68': 'FUN_00116f68',
    '0x17034': 'FUN_00117034',
    '0x171d4': 'FUN_001171d4',
    '0x17384': 'FUN_00117384',
    '0x17424': 'FUN_00117424',
    '0x17540': 'FUN_00117540',
    '0x17750': 'FUN_00117750',
    '0x17848': 'FUN_00117848',
    '0x17e34': 'FUN_00117e34',
    '0x17f50': 'FUN_00117f50',
    '0x18060': 'FUN_00118060',
    '0x1816c': 'FUN_0011816c',
    '0x18290': 'FUN_00118290',
    '0x182cc': 'FUN_001182cc',
    '0x18308': 'FUN_00118308',
    '0x186d8': 'FUN_001186d8',
    '0x188e0': 'FUN_001188e0',
    '0x1915c': 'FUN_0011915c',
    '0x19200': 'FUN_00119200',
    '0x19248': 'FUN_00119248',
    '0x19290': 'FUN_00119290',
    '0x192e4': 'FUN_001192e4',
    '0x193c0': 'FUN_001193c0',
    '0x193e4': 'FUN_001193e4',
    '0x194d4': 'FUN_001194d4',
    '0x195cc': 'FUN_001195cc',
    '0x1968c': 'FUN_0011968c',
    '0x196fc': 'FUN_001196fc',
    '0x198ec': 'FUN_001198ec',
    '0x19b68': 'FUN_00119b68',
    '0x19bc8': 'FUN_00119bc8',
    '0x19e00': 'FUN_00119e00',
    '0x19e34': 'FUN_00119e34',
    '0x19e7c': 'FUN_00119e7c',
    '0x19e84': 'FUN_00119e84',
    '0x19eac': 'FUN_00119eac',
    '0x19ec0': 'FUN_00119ec0',
    '0x19ef0': 'FUN_00119ef0',
    '0x19f38': 'FUN_00119f38',
    '0x19f8c': 'FUN_00119f8c',
    '0x1a0e0': 'FUN_0011a0e0',
    '0x1a1a4': 'FUN_0011a1a4',
    '0x1a308': 'FUN_0011a308',
    '0x1a378': 'FUN_0011a378',
    '0x1a3d8': 'FUN_0011a3d8',
    '0x1ada0': 'FUN_0011ada0',
    '0x1ae04': 'FUN_0011ae04',
    '0x1ae10': 'FUN_0011ae10',
    '0x1ae1c': 'FUN_0011ae1c',
    '0x1ae94': 'FUN_0011ae94',
    '0x1af24': 'FUN_0011af24',
    '0x1af44': 'FUN_0011af44',
    '0x1af64': 'FUN_0011af64',
    '0x1afa0': 'FUN_0011afa0',
    '0x1bac0': 'FUN_0011bac0',
    '0x1bb7c': 'FUN_0011bb7c',
    '0x1bbe4': 'FUN_0011bbe4',
    '0x1bc9c': 'FUN_0011bc9c',
    '0x1bf24': 'FUN_0011bf24',
    '0x1bf58': 'FUN_0011bf58',
    '0x1bf8c': 'FUN_0011bf8c',
    '0x1bffc': 'FUN_0011bffc',
    '0x1c06c': 'FUN_0011c06c',
    '0x1c730': 'FUN_0011c730',
    '0x1c744': 'FUN_0011c744',
    '0x1c758': 'FUN_0011c758',
    '0x1c760': 'FUN_0011c760',
    '0x1c784': 'FUN_0011c784',
    '0x1ca58': 'FUN_0011ca58',
    '0x1ca74': 'FUN_0011ca74',
    '0x1ca90': 'FUN_0011ca90',
    '0x1cab4': 'FUN_0011cab4',
    '0x1cb58': 'FUN_0011cb58',
    '0x1cc00': 'FUN_0011cc00',
    '0x1cc3c': 'FUN_0011cc3c',
    '0x1cc78': 'FUN_0011cc78',
    '0x1cce4': 'FUN_0011cce4',
    '0x1cd50': 'FUN_0011cd50',
    '0x1ced4': 'FUN_0011ced4',
    '0x1d174': 'FUN_0011d174',
    '0x1dd00': 'FUN_0011dd00',
    '0x1dd78': 'FUN_0011dd78',
    '0x1ddd8': 'FUN_0011ddd8',
    '0x1dde4': 'FUN_0011dde4',
    '0x1ddf0': 'FUN_0011ddf0',
    '0x1e5cc': 'FUN_0011e5cc',
    '0x1e5d8': 'FUN_0011e5d8',
    '0x1e638': 'FUN_0011e638',
    '0x1e694': 'FUN_0011e694',
    '0x1e6f4': 'FUN_0011e6f4',
    '0x1e748': 'FUN_0011e748',
    '0x1e7a0': 'FUN_0011e7a0',
    '0x1e7f4': 'FUN_0011e7f4',
    '0x1e844': 'FUN_0011e844',
    '0x1e9f4': 'thunk_FUN_0011e9f8',
    '0x1e9f8': 'FUN_0011e9f8',
    '0x1ef40': 'FUN_0011ef40',
    '0x1f0cc': 'FUN_0011f0cc',
    '0x1f698': 'FUN_0011f698',
    '0x1f7b0': 'FUN_0011f7b0',
    '0x1f934': 'FUN_0011f934',
    '0x1fbd4': 'FUN_0011fbd4',
    '0x1fbf0': 'FUN_0011fbf0',
    '0x1fc0c': 'FUN_0011fc0c',
    '0x1fc4c': 'FUN_0011fc4c',
    '0x1fc84': 'FUN_0011fc84',
    '0x1fce4': 'FUN_0011fce4',
    '0x1fd3c': 'FUN_0011fd3c',
    '0x1fd54': 'FUN_0011fd54',
    '0x1fd6c': 'FUN_0011fd6c',
    '0x1fd74': 'FUN_0011fd74',
    '0x1fdac': 'FUN_0011fdac',
    '0x1fdb4': 'FUN_0011fdb4',
    '0x1fdbc': 'FUN_0011fdbc',
    '0x1fe1c': 'FUN_0011fe1c',
    '0x1fe74': 'FUN_0011fe74',
    '0x1fe7c': 'FUN_0011fe7c',
    '0x1feb4': 'FUN_0011feb4',
    '0x1fedc': 'FUN_0011fedc',
    '0x1ff1c': 'FUN_0011ff1c',
    '0x2000c': 'FUN_0012000c',
    '0x20120': 'FUN_00120120',
    '0x2015c': 'FUN_0012015c',
    '0x201b4': 'FUN_001201b4',
    '0x202c0': 'FUN_001202c0',
    '0x202c8': 'FUN_001202c8',
    '0x20320': 'FUN_00120320',
    '0x20328': 'FUN_00120328',
    '0x2033c': 'FUN_0012033c',
    '0x20344': 'FUN_00120344',
    '0x2034c': 'FUN_0012034c',
    '0x20354': 'FUN_00120354',
    '0x2037c': 'FUN_0012037c',
    '0x20384': 'FUN_00120384',
    '0x2038c': 'FUN_0012038c',
    '0x20404': 'FUN_00120404',
    '0x208fc': 'FUN_001208fc',
    '0x20d20': 'FUN_00120d20',
    '0x212d4': 'FUN_001212d4',
    '0x214e0': 'FUN_001214e0',
    '0x215bc': 'FUN_001215bc',
    '0x21608': 'FUN_00121608',
    '0x216c8': 'FUN_001216c8',
    '0x217b4': 'FUN_001217b4',
    '0x218a8': 'FUN_001218a8',
    '0x218ac': 'FUN_001218ac',
    '0x21a24': 'FUN_00121a24',
    '0x21b18': 'FUN_00121b18',
    '0x21c14': 'FUN_00121c14',
    '0x21d0c': 'FUN_00121d0c',
    '0x21d30': 'FUN_00121d30',
    '0x21e00': 'FUN_00121e00',
    '0x21e28': 'FUN_00121e28',
    '0x21e68': 'FUN_00121e68',
    '0x21e84': 'FUN_00121e84',
    '0x21f44': 'FUN_00121f44',
    '0x21ff8': 'FUN_00121ff8',
    '0x22058': 'FUN_00122058',
    '0x220b8': 'FUN_001220b8',
    '0x22118': 'FUN_00122118',
    '0x22208': 'FUN_00122208',
    '0x22298': 'FUN_00122298',
    '0x22394': 'FUN_00122394',
    '0x224f4': 'FUN_001224f4',
    '0x22504': 'FUN_00122504',
    '0x22920': 'FUN_00122920',
    '0x229bc': 'FUN_001229bc',
    '0x22b1c': 'FUN_00122b1c',
    '0x22c50': 'FUN_00122c50',
    '0x231c0': 'FUN_001231c0',
    '0x2325c': 'FUN_0012325c',
    '0x23268': 'FUN_00123268',
    '0x232a8': 'FUN_001232a8',
    '0x2333c': 'FUN_0012333c',
    '0x23348': 'FUN_00123348',
    '0x23374': 'FUN_00123374',
    '0x23474': 'thunk_FUN_00123374',
    '0x23478': 'FUN_00123478',
    '0x2349c': 'FUN_0012349c',
    '0x2e008': 'remove',
    '0x2e010': 'dl_iterate_phdr',
    '0x2e018': 'fopen64',
    '0x2e028': 'strncpy',
    '0x2e030': '__cxa_free_exception',
    '0x2e038': 'logic_error',
    '0x2e040': '__cxa_begin_catch',
    '0x2e048': 'inflateEnd',
    '0x2e050': 'bad_cast',
    '0x2e058': '__cxa_atexit',
    '0x2e060': 'curl_easy_setopt',
    '0x2e068': 'operator.delete[]',
    '0x2e078': 'memcmp',
    '0x2e080': 'pthread_create',
    '0x2e088': 'has_facet',
    '0x2e090': 'operator.new',
    '0x2e098': 'access',
    '0x2e0a0': 'fgets',
    '0x2e0a8': 'fread',
    '0x2e0b0': '__release_weak',
    '0x2e0b8': 'malloc',
    '0x2e0c0': 'fseek',
    '0x2e0c8': 'pthread_once',
    '0x2e0d8': '__stack_chk_fail',
    '0x2e0e0': 'fwrite',
    '0x2e0e8': 'deflate',
    '0x2e0f0': 'mkdir',
    '0x2e0f8': 'AAssetManager_fromJava',
    '0x2e100': '~regex_error',
    '0x2e108': '__cxa_guard_release',
    '0x2e110': 'operator.delete',
    '0x2e118': 'use_facet',
    '0x2e120': 'strncat',
    '0x2e128': 'chmod',
    '0x2e130': 'inflateInit2_',
    '0x2e138': 'operator.new[]',
    '0x2e140': 'uncaught_exception',
    '0x2e148': 'curl_easy_init',
    '0x2e150': 'free',
    '0x2e160': 'inflate',
    '0x2e170': 'fputc',
    '0x2e178': '__fwrite_chk',
    '0x2e180': 'regex_error',
    '0x2e188': 'stod',
    '0x2e190': '__cxa_allocate_exception',
    '0x2e198': 'getloc',
    '0x2e1a0': 'AAsset_getBuffer',
    '0x2e1a8': 'crc32',
    '0x2e1b0': '__android_log_print',
    '0x2e1b8': 'deflateEnd',
    '0x2e1c0': 'dirname',
    '0x2e1c8': '__gxx_personality_v0',
    '0x2e1d0': 'fflush',
    '0x2e1d8': 'strchr',
    '0x2e1e0': 'strdup',
    '0x2e1e8': 'strcmp',
    '0x2e1f0': 'curl_slist_append',
    '0x2e1f8': 'locale',
    '0x2e200': '__get_classname',
    '0x2e208': '__system_property_get',
    '0x2e210': 'strlen',
    '0x2e218': '__cxa_throw',
    '0x2e220': '__cxa_guard_abort',
    '0x2e228': '~bad_cast',
    '0x2e230': 'pthread_mutex_unlock',
    '0x2e238': 'memmove',
    '0x2e240': 'memset',
    '0x2e248': 'stoi',
    '0x2e250': 'fseeko',
    '0x2e258': 'ftell',
    '0x2e260': '__next_prime',
    '0x2e268': 'strstr',
    '0x2e270': '__cxa_finalize',
    '0x2e278': 'locale',
    '0x2e280': 'curl_easy_perform',
    '0x2e290': 'curl_easy_cleanup',
    '0x2e298': '__cxa_end_catch',
    '0x2e2a0': 'ftello',
    '0x2e2a8': '__set_failbit_and_consider_rethrow',
    '0x2e2b0': '__cxa_guard_acquire',
    '0x2e2b8': 'name',
    '0x2e2c0': '__exec',
    '0x2e2c8': 'fclose',
    '0x2e2e0': 'AAsset_getLength',
    '0x2e2e8': 'fseeko64',
    '0x2e2f0': 'ferror',
    '0x2e300': 'abort',
    '0x2e308': '__vsprintf_chk',
    '0x2e310': '~locale',
    '0x2e318': 'init',
    '0x2e320': '~length_error',
    '0x2e330': 'now',
    '0x2e338': 'ftello64',
    '0x2e340': 'pthread_mutex_lock',
    '0x2e348': 'deflateInit2_',
    '0x2e350': 'clear',
    '0x2e360': 'AAssetManager_open',
    '0x2e370': '__set_badbit_and_consider_rethrow',
    '0x2e378': 'fopen',
    '0x2e380': 'AAsset_close',
    '0x2e388': 'memcpy',
    '0x2e390': '~ios_base',
    '0x2e398': '__register_atfork',
    '0x2e3a0': '__cxa_rethrow',
    '0x2e3a8': '__get_collation_name',
    '0x2e3b0': '~__shared_weak_count',
    '0x2e3b8': 'memchr',
    '0x2e3c0': 'atoi',
    '0x2e3c8': 'strlen',
    '0x2e3d8': 'terminate',
    '0x2e3e0': 'to_string',
    '0x4f50': 'FUN_00104f50',
    '0x4f70': 'remove',
    '0x4f80': 'dl_iterate_phdr',
    '0x4f90': 'fopen64',
    '0x4fa0': 'strncpy',
    '0x4fb0': '__cxa_free_exception',
    '0x4fc0': 'logic_error',
    '0x4fd0': '__cxa_begin_catch',
    '0x4fe0': 'inflateEnd',
    '0x4ff0': 'bad_cast',
    '0x5000': '__cxa_atexit',
    '0x5010': 'curl_easy_setopt',
    '0x5020': 'operator.delete[]',
    '0x5030': 'memcmp',
    '0x5040': 'has_facet',
    '0x5050': 'operator.new',
    '0x5060': 'access',
    '0x5070': 'fgets',
    '0x5080': 'fread',
    '0x5090': '__release_weak',
    '0x50a0': 'malloc',
    '0x50b0': 'fseek',
    '0x50c0': 'pthread_once',
    '0x50d0': '__stack_chk_fail',
    '0x50e0': 'fwrite',
    '0x50f0': 'deflate',
    '0x5100': 'mkdir',
    '0x5110': 'AAssetManager_fromJava',
    '0x5120': '__cxa_guard_release',
    '0x5130': 'operator.delete',
    '0x5140': 'use_facet',
    '0x5150': 'strncat',
    '0x5160': 'chmod',
    '0x5170': 'inflateInit2_',
    '0x5180': 'operator.new[]',
    '0x5190': 'uncaught_exception',
    '0x51a0': 'curl_easy_init',
    '0x51b0': 'free',
    '0x51c0': 'inflate',
    '0x51d0': 'fputc',
    '0x51e0': '__fwrite_chk',
    '0x51f0': 'regex_error',
    '0x5200': 'stod',
    '0x5210': '__cxa_allocate_exception',
    '0x5220': 'getloc',
    '0x5230': 'AAsset_getBuffer',
    '0x5240': 'crc32',
    '0x5250': '__android_log_print',
    '0x5260': 'deflateEnd',
    '0x5270': 'dirname',
    '0x5280': '__gxx_personality_v0',
    '0x5290': 'fflush',
    '0x52a0': 'strchr',
    '0x52b0': 'strdup',
    '0x52c0': 'strcmp',
    '0x52d0': 'curl_slist_append',
    '0x52e0': 'locale',
    '0x52f0': '__get_classname',
    '0x5300': '__system_property_get',
    '0x5310': 'strlen',
    '0x5320': '__cxa_throw',
    '0x5330': '__cxa_guard_abort',
    '0x5340': 'pthread_mutex_unlock',
    '0x5350': 'memmove',
    '0x5360': 'memset',
    '0x5370': 'stoi',
    '0x5380': 'fseeko',
    '0x5390': 'ftell',
    '0x53a0': '__next_prime',
    '0x53b0': 'strstr',
    '0x53c0': '__cxa_finalize',
    '0x53d0': 'locale',
    '0x53e0': 'curl_easy_perform',
    '0x53f0': 'curl_easy_cleanup',
    '0x5400': '__cxa_end_catch',
    '0x5410': 'ftello',
    '0x5420': '__set_failbit_and_consider_rethrow',
    '0x5430': '__cxa_guard_acquire',
    '0x5440': 'name',
    '0x5450': '__exec',
    '0x5460': 'fclose',
    '0x5470': 'AAsset_getLength',
    '0x5480': 'fseeko64',
    '0x5490': 'ferror',
    '0x54a0': 'abort',
    '0x54b0': '__vsprintf_chk',
    '0x54c0': '~locale',
    '0x54d0': 'init',
    '0x54e0': 'now',
    '0x54f0': 'ftello64',
    '0x5500': 'pthread_mutex_lock',
    '0x5510': 'deflateInit2_',
    '0x5520': 'clear',
    '0x5530': 'AAssetManager_open',
    '0x5540': '__set_badbit_and_consider_rethrow',
    '0x5550': 'fopen',
    '0x5560': 'AAsset_close',
    '0x5570': 'memcpy',
    '0x5580': '~ios_base',
    '0x5590': '__register_atfork',
    '0x55a0': '__cxa_rethrow',
    '0x55b0': '__get_collation_name',
    '0x55c0': '~__shared_weak_count',
    '0x55d0': 'memchr',
    '0x55e0': 'atoi',
    '0x55f0': 'strlen',
    '0x5600': 'terminate',
    '0x5610': 'to_string',
    '0x5620': 'entry',
    '0x562c': 'FUN_0010562c',
    '0x5630': '_FINI_0',
    '0x5668': 'FUN_00105668',
    '0x658c': 'FUN_0010658c',
    '0x6628': 'FUN_00106628',
    '0x66c4': 'CallVoidMethodV',
    '0x6760': 'FUN_00106760',
    '0x6bd0': 'FUN_00106bd0',
    '0x6c6c': 'FUN_00106c6c',
    '0x6d08': 'FUN_00106d08',
    '0x6e8c': 'FUN_00106e8c',
    '0x6ff0': 'FUN_00106ff0',
    '0x79a8': 'FUN_001079a8',
    '0x7cf0': 'FUN_00107cf0',
    '0x7d88': 'FUN_00107d88',
    '0x7fa0': 'FUN_00107fa0',
    '0x8348': 'FUN_00108348',
    '0x8980': 'FUN_00108980',
    '0x8b68': 'FUN_00108b68',
    '0x8e78': 'FUN_00108e78',
    '0x9160': 'FUN_00109160',
    '0x91cc': 'FUN_001091cc',
    '0x9734': 'FUN_00109734',
    '0x97e0': 'FUN_001097e0',
    '0x980c': 'FUN_0010980c',
    '0x9840': 'FUN_00109840',
    '0x9b34': 'JNI_OnLoad',
    '0x9be4': 'FUN_00109be4',
    '0x9bf0': 'FindClass',
    '0x9bfc': 'GetMethodID',
    '0x9c08': 'FUN_00109c08',
    '0x9c14': 'FUN_00109c14',
    '0x9cac': 'FUN_00109cac',
    '0x9cb8': 'FUN_00109cb8',
    '0x9cc4': 'FUN_00109cc4',
    '0x9cd0': 'FUN_00109cd0',
    '0x9d80': 'FUN_00109d80',
    '0x9df4': 'FUN_00109df4',
    '0x9ed8': 'FUN_00109ed8',
    '0xa0a4': 'FUN_0010a0a4',
    '0xa2a8': 'FUN_0010a2a8',
    '0xa5cc': 'FUN_0010a5cc',
    '0xa6b0': 'FUN_0010a6b0',
    '0xaa30': 'FUN_0010aa30',
    '0xab34': 'FUN_0010ab34',
    '0xab84': 'FUN_0010ab84',
    '0xabb4': 'FUN_0010abb4',
    '0xae24': 'FUN_0010ae24',
    '0xaff8': 'FUN_0010aff8',
    '0xb220': 'FUN_0010b220',
    '0xb358': 'FUN_0010b358',
    '0xb4b8': 'FUN_0010b4b8',
    '0xb65c': 'FUN_0010b65c',
    '0xb800': 'FUN_0010b800',
    '0xb84c': 'operator.delete',
    '0xb850': 'FUN_0010b850',
    '0xb85c': 'FUN_0010b85c',
    '0xb860': 'FUN_0010b860',
    '0xb864': 'FUN_0010b864',
    '0xb888': 'FUN_0010b888',
    '0xb8a0': 'FUN_0010b8a0',
    '0xb8bc': 'operator.delete',
    '0xb8c0': 'FUN_0010b8c0',
    '0xb900': 'FUN_0010b900',
    '0xb914': 'FUN_0010b914',
    '0xb93c': 'FUN_0010b93c',
    '0xb97c': 'FUN_0010b97c',
    '0xb980': 'FUN_0010b980',
    '0xbe5c': 'FUN_0010be5c',
    '0xc0e0': 'FUN_0010c0e0',
    '0xc478': 'FUN_0010c478',
    '0xc4c4': 'FUN_0010c4c4',
    '0xc504': 'FUN_0010c504',
    '0xc544': 'FUN_0010c544',
    '0xc584': 'FUN_0010c584',
    '0xc5bc': 'FUN_0010c5bc',
    '0xc610': 'FUN_0010c610',
    '0xc660': 'FUN_0010c660',
    '0xc780': 'FUN_0010c780',
    '0xc810': 'FUN_0010c810',
    '0xc89c': 'FUN_0010c89c',
    '0xca54': 'FUN_0010ca54',
    '0xcf84': 'FUN_0010cf84',
    '0xd120': 'FUN_0010d120',
    '0xd134': 'FUN_0010d134',
    '0xd180': 'FUN_0010d180',
    '0xd1cc': 'FUN_0010d1cc',
    '0xd3bc': 'FUN_0010d3bc',
    '0xd540': 'FUN_0010d540',
    '0xd67c': 'FUN_0010d67c',
    '0xd750': 'FUN_0010d750',
    '0xd7f8': 'FUN_0010d7f8',
    '0xd948': 'FUN_0010d948',
    '0xd994': 'FUN_0010d994',
    '0xd9f0': 'FUN_0010d9f0',
    '0xda30': 'FUN_0010da30',
    '0xda7c': 'FUN_0010da7c',
    '0xdb38': 'FUN_0010db38',
    '0xdd2c': 'FUN_0010dd2c',
    '0xe128': 'FUN_0010e128',
    '0xe260': 'FUN_0010e260',
    '0xe2ac': 'FUN_0010e2ac',
    '0xe370': 'FUN_0010e370',
    '0xe3c4': 'FUN_0010e3c4',
    '0xe414': 'FUN_0010e414',
    '0xe48c': 'FUN_0010e48c',
    '0xe4e0': 'FUN_0010e4e0',
    '0xe530': 'FUN_0010e530',
    '0xe578': 'FUN_0010e578',
    '0xe5b8': 'FUN_0010e5b8',
    '0xe600': 'FUN_0010e600',
    '0xe654': 'FUN_0010e654',
    '0xe6a4': 'FUN_0010e6a4',
    '0xe7ac': 'FUN_0010e7ac',
    '0xe800': 'FUN_0010e800',
    '0xe850': 'FUN_0010e850',
    '0xe8e8': 'FUN_0010e8e8',
    '0xe928': 'FUN_0010e928',
    '0xe9ec': 'FUN_0010e9ec',
    '0xeba0': 'FUN_0010eba0',
    '0xede8': 'FUN_0010ede8',
    '0xef2c': 'FUN_0010ef2c',
    '0xef50': 'FUN_0010ef50',
    '0xf944': 'FUN_0010f944',
    '0xfc24': 'FUN_0010fc24',
    '0xfc38': 'FUN_0010fc38',
    '0xfd00': 'FUN_0010fd00',
    '0xfe38': 'FUN_0010fe38',
};
export { stalk };
